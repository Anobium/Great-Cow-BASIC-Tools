'A real simply and easy 10-bit PWM calculator with 0-100% duty cycle range:  Sept 2017 Anobium


#chip 16f18855, 32        'Use a chip with the correct operating frequency!

#define PWM_Freq 38     'Set frequency in KHz, just change the number
#define PWM_Duty 50     'Set duty cycle to 0-100%, just change the number

''' Do not change below.
''' Cut and paste warning to your code
''' Remove 'Warning's from your code but using Replace 'Warning' with nothing.
''' Choose and set your timer - replace the 'x' five (5) times
''' Choose and set your PWM model - replace the 'x' three (3) times


''' Do not change below this line unless you know what you are doing.



'    PWM routines for the GCBASIC compiler
'    Copyright (C) 2017 Evan Venn

'    This library is free software; you can redistribute it and/or
'    modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation; either
'    version 2.1 of the License, or (at your option) any later version.

'    This library is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'    Lesser General Public License for more details.

'    You should have received a copy of the GNU Lesser General Public
'    License along with this library; if not, write to the Free Software
'    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

'    v1.00 6/9/17 Evan R. Venn
'    v1.01 7/9/17 Evan R. Venn. Corrected Prescaler
'    v1.02 7/9/17 Evan R. Venn. Corrected Clock source





















      'Script to calculate constants required for given Frequency and Duty Cycle
      #script

        warning "' Great Cow BASIC:  A PWM 10-bit calculator"
        warning "' Info: Chip Freq = " ChipMHz
        warning "' Info: PWM Freq  = " PWM_Freq
        warning "' Info: PWM Duty  = " PWM_Duty
        warning " "

        PR2Temp = int((1/PWM_Freq)/(4*(1/(ChipMHz*1000))))
        TxPR = 1
        if PR2Temp > 255 then
            PR2Temp = int((1/PWM_Freq)/(16*(1/(ChipMHz*1000))))
            TxPR = 4
            if PR2Temp > 255 then
              PR2Temp = int((1/PWM_Freq)/(64*(1/(ChipMHz*1000))))
              TxPR = 16
            if PR2Temp > 255 then
              'error TxPR, PR2Temp
              error msg(BadPWMFreq)
            end if
          end if
        end if

        DutyCycle = (PWM_Duty / 25) * (PR2Temp + 1)
        DutyCycleH = (DutyCycle AND 1020)/4
        DutyCycleL = DutyCycle AND 3
        DutyCycle = int(DutyCycle * 1 )

        PWMOsc1_Calc = int(60000/(240/ChipMHz))    'This is used in the calculations


        Tx_PR = 1
        PRx_Temp_Calc = int(PWMOsc1_Calc) / int(PWM_Freq)

        IF Int(PRx_Temp_Calc / 256 ) > 0 then
          Tx_PR = 4
          'Divide by 4
          PRx_Temp_Calc = PRx_Temp_Calc / 4
        end if

        IF Int(PRx_Temp_Calc / 256 ) > 0 then
          Tx_PR = 16
          'Divide by 4
          PRx_Temp_Calc = PRx_Temp_Calc / 4
        end if

        warning "' Info: x = Timer number, typically use Timer 2"


        if Tx_PR = 1 Then
          warning "TxCON = TxCON or 0 ' Set Timer x PreScaler = 1"
        end if
        if Tx_PR = 4 Then
          warning "TxCON = TxCON or 1 ' Set Timer x PreScaler = 4"
        end if
        if Tx_PR = 16 Then
          warning "TxCON = TxCON or 2 ' Set Timer x PreScaler = 16"
        end if

        PRx_Temp_Calc = int( PRx_Temp_Calc * 1 )

        if var(T2CLKCON) Then
            warning "TxCLKCON = 0b00000001 'Select Timer source as FOSC/4"
        end if

        warning "TMRxIF = 0"
        warning "TMRxON = 1"
        warning "PRx = " PRx_Temp_Calc
        warning "'"
        warning "' Info: DutyCycle Calculate = " DutyCycle
        warning "' Info: x = PMW module"
        warning "PWMxCON = 0b11000000"   'Enable PWM Module, Module Output
        warning "PWMxDCH = " DutyCycleH
        warning "PWMxDCL = " DutyCycleL
        warning "'"
        warning "'DIR port.pin out   'You may need to set the port to an output"


      #endscript
